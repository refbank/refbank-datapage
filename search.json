[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Palmer Penguins",
    "section": "",
    "text": "The goal of palmerpenguins is to provide a great dataset for data exploration & visualization, as an alternative to iris.\nData were collected and made available by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER, a member of the Long Term Ecological Research Network. The dataset contains data for 344 penguins. There are 3 different species of penguins in this dataset, collected from 3 islands in the Palmer Archipelago, Antarctica.\nData are available by CC-0 license in accordance with the Palmer Station LTER Data Policy and the LTER Data Access Policy for Type I data."
  },
  {
    "objectID": "about.html#palmerpenguins",
    "href": "about.html#palmerpenguins",
    "title": "Palmer Penguins",
    "section": "",
    "text": "The goal of palmerpenguins is to provide a great dataset for data exploration & visualization, as an alternative to iris.\nData were collected and made available by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER, a member of the Long Term Ecological Research Network. The dataset contains data for 344 penguins. There are 3 different species of penguins in this dataset, collected from 3 islands in the Palmer Archipelago, Antarctica.\nData are available by CC-0 license in accordance with the Palmer Station LTER Data Policy and the LTER Data Access Policy for Type I data."
  },
  {
    "objectID": "analysis.html",
    "href": "analysis.html",
    "title": "Palmer Penguins",
    "section": "",
    "text": "You can access the palmerpenguins data programmatically using the Redivis API for R or Python.\n\nRPython\n\n\n\nInstall the redivis-r package:\n\ndevtools::install_github(\"redivis/redivis-r\")\n\nGenerate and set an API token.\nAccess the data:\n\nlibrary(redivis)\n\nuser &lt;- redivis::user(\"datapages\")\ndataset &lt;- user$dataset(\"palmerpenguins\")\ntable &lt;- dataset$table(\"penguins\")\n\n# Load table as tidyverse tibble\ndf &lt;- table$to_tibble()\nView documentation\n\n\n\nInstall the redivis-python client library:\n\npip install --upgrade redivis\n\nGenerate and set an API token.\nAccess the data:\n\nimport redivis\n\nuser = redivis.user(\"datapages\")\ndataset = user.dataset(\"palmerpenguins\")\ntable = dataset.table(\"penguins\")\n\n# Load table as a dataframe\ndf = table.to_pandas_dataframe()\nView documentation"
  },
  {
    "objectID": "analysis.html#programmatic-access",
    "href": "analysis.html#programmatic-access",
    "title": "Palmer Penguins",
    "section": "",
    "text": "You can access the palmerpenguins data programmatically using the Redivis API for R or Python.\n\nRPython\n\n\n\nInstall the redivis-r package:\n\ndevtools::install_github(\"redivis/redivis-r\")\n\nGenerate and set an API token.\nAccess the data:\n\nlibrary(redivis)\n\nuser &lt;- redivis::user(\"datapages\")\ndataset &lt;- user$dataset(\"palmerpenguins\")\ntable &lt;- dataset$table(\"penguins\")\n\n# Load table as tidyverse tibble\ndf &lt;- table$to_tibble()\nView documentation\n\n\n\nInstall the redivis-python client library:\n\npip install --upgrade redivis\n\nGenerate and set an API token.\nAccess the data:\n\nimport redivis\n\nuser = redivis.user(\"datapages\")\ndataset = user.dataset(\"palmerpenguins\")\ntable = dataset.table(\"penguins\")\n\n# Load table as a dataframe\ndf = table.to_pandas_dataframe()\nView documentation"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Palmer Penguins",
    "section": "",
    "text": "Artwork by @allison_horst\n\n\n\n\n\n\n\n\n\nPlot = import(\"https://esm.sh/@observablehq/plot@0.6.13\")\nd = transpose(data)\n\ndistinct_cutoff = 10\n\ndisc_types = ['string', 'boolean']\ndisc_vars = vars.filter(d =&gt; disc_types.includes(d.type) && d.statistics.numDistinct &lt;= distinct_cutoff).map(d =&gt; [d.label ? d.label : d.name, d.name])\ndisc_opts = new Map([['', null]].concat(disc_vars))\n\ncont_types = ['integer', 'float', 'date', 'datetime', 'time']\ncont_vars = vars.filter(d =&gt; cont_types.includes(d.type) && d.statistics.numDistinct &gt; distinct_cutoff).map(d =&gt; [d.label ? d.label : d.name, d.name])\ncont_opts = new Map(cont_vars)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nviewof x_var = Inputs.select(cont_opts, {value: Array.from(cont_opts.values())[0], label: \"X axis\"})\nviewof y_var = Inputs.select(cont_opts, {value: Array.from(cont_opts.values())[1], label: \"Y axis\"})\nviewof color_var = Inputs.select(disc_opts, {value: Array.from(disc_opts.values())[1], label: \"Color\"})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndefault_color = d3.schemeCategory10[0]\nplt_color = color_var || default_color\n\nall_vars = cont_vars.concat(disc_vars)\nchannels = Object.fromEntries(all_vars.map(k =&gt; [k[1], k[1]]))\n\nviewof scatter = Plot.plot({\n  style: { fontFamily: \"var(--sans-serif)\" },\n  inset: 8,\n   grid: true,\n      x: { tickFormat: \"\" },\n  color: { legend: true },\n  marks: [\n    Plot.dot(d, {\n      x: x_var,\n      y: y_var,\n      stroke: plt_color,\n      tip: true,\n      channels: channels\n    }),\n  ]\n})\n\nviewof x_hist = Plot.plot({\n  style: { fontFamily: \"var(--sans-serif)\" },\n  width: 640/2,\n      x: { tickFormat: \"\" },\n      y: { grid: true },\n  marks: [\n    Plot.rectY(d, Plot.binX({y: \"count\"}, {x: x_var, fill: plt_color})),\n    Plot.ruleY([0])\n  ]\n})\n\nviewof y_hist = Plot.plot({\n  style: { fontFamily: \"var(--sans-serif)\" },\n  width: 640/2,\n      y: { grid: true },\n  marks: [\n    Plot.rectY(d, Plot.binX({y: \"count\"}, {x: y_var, fill: plt_color})),\n    Plot.ruleY([0])\n  ]\n})\n\nhtml`&lt;div style=\"display: flex; flex-wrap: wrap; align-items: flex-end;\"&gt;\n &lt;div style=\"flex-basis: 25%\"&gt; ${viewof y_hist} &lt;/div&gt;\n &lt;div style=\"flex-basis: 50%\"&gt; ${viewof scatter} &lt;/div&gt;\n &lt;div style=\"flex-basis: 25%\"&gt; ${viewof x_hist} &lt;/div&gt;\n&lt;/div&gt;`"
  }
]